{"ast":null,"code":"var _jsxFileName = \"/Users/santando/xlbas-project/src/common/Table/index.js\";\n\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './table.css'; // import CustomIcon from '../../../atoms/Icons';\n\nconst NO_DATA_STATE = '-';\n/**\n * This function return the alignment property based on the prop coming\n * @memberof TableHeader\n * @param {string} Alignment property coming in props\n * @param {number} index\n * @returns {string} Alignment property\n */\n\nconst setAlignment = (aligmentProp, index) => {\n  let align = 'left';\n\n  if (aligmentProp === 'default' && index !== 0) {\n    align = 'right';\n  }\n\n  if (aligmentProp === 'right') {\n    align = 'right';\n  }\n\n  if (aligmentProp === 'center') {\n    align = 'center';\n  }\n\n  return align;\n};\n/**\n * TableCell component contains native td tag implementation with some classes to handle the padding horizontally/vertically\n * DataNot Available state can also be handled.\n * @class\n * @param {TableCell~propTypes} props - TableCell props.\n * @returns {ReactElement}\n */\n\n\nconst TableCell = props => {\n  const {\n    cellData,\n    children,\n    className,\n    width,\n    paddingLevelY,\n    paddingLevelX,\n    showNoDataState,\n    desktop,\n    mobile,\n    ...otherProps\n  } = props; // Return blank if not meeting device requirements\n\n  const tableCellClasses = classnames('table-cell', `py-${paddingLevelY}x`, `px-${paddingLevelX}x`, className);\n  return /*#__PURE__*/React.createElement(\"td\", Object.assign({\n    className: tableCellClasses,\n    style: {\n      minWidth: width,\n      width\n    }\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), children || cellData || showNoDataState && NO_DATA_STATE);\n};\n/**\n * Complete props of TableCell.\n * @typedef {Object} TableCell~propTypes\n * @property {(string|node)} [cellData=''] This hold the data/node to be displayed on the cell.\n * @property {string} [className=''] className for the TableCell.\n * @property {string} [width='auto'] width for the Table Cell.\n * @property {number} [paddingLevelY=2] paddingLevelY for the tabelCell.\n * @property {number} [paddingLevelX=0] paddingLevelX for the tabelCell.\n * @property {bool} [showNoDataState=true] Flag for the no Data State.\n * @property {(string|node)} [children=null] children for the Table Cell.\n * @property {bool} [mobile=false] - to be displayed only on mobile.\n * @property {bool} [desktop=false] - to be displayed only on desktop.\n */\n\n\nTableCell.propTypes = {\n  cellData: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  width: PropTypes.string,\n  paddingLevelY: PropTypes.number,\n  paddingLevelX: PropTypes.number,\n  showNoDataState: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  mobile: PropTypes.bool,\n  desktop: PropTypes.bool\n};\nTableCell.defaultProps = {\n  cellData: '',\n  className: '',\n  width: 'auto',\n  children: null,\n  showNoDataState: true,\n  paddingLevelY: 2,\n  paddingLevelX: 0,\n  mobile: false,\n  desktop: false\n};\n/**\n * This component is responsible to render the TableRow component, this is a default TableRow called\n * from the Table Component. default Columns can either be created from data or with rowProps.\n * @class\n * @param {TableRow~propTypes} props - TableRow props.\n * @returns {ReactElement}\n */\n\nconst TableRow = props => {\n  const {\n    rowData,\n    children,\n    className,\n    tableCellClassName,\n    columnAlignment,\n    rowProps: {\n      columns\n    },\n    ...otherProps\n  } = props;\n  const tableRowClasses = classnames('table-row', className);\n  const allChild = React.Children.toArray(children);\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    className: tableRowClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, children && allChild.map(child => React.cloneElement(child, { ...otherProps\n  })) || (columns && columns.length ? columns.map(({\n    key,\n    ...htmlProps\n  }, index) => key && /*#__PURE__*/React.createElement(TableCell, Object.assign({\n    cellData: rowData[key],\n    key: `cell-${index}`,\n    align: setAlignment(columnAlignment, index),\n    className: tableCellClassName\n  }, otherProps, htmlProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }\n  }))) : Object.values(rowData).map((celldata, index) => /*#__PURE__*/React.createElement(TableCell, Object.assign({\n    cellData: celldata,\n    key: `cell-${index}`,\n    className: tableCellClassName\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  })))));\n};\n/**\n * Complete props of TableRow.\n * @typedef {Object} TableRow~propTypes\n * @property {Object} [rowData={}] This hold the rowData for the Row.\n * @property {string} [className=''] ClassName for the TableRow.\n * @property {string} [tableCellClassName = ''] tableCellClassName for table cell.\n * @property {string} columnAlignment columnAlignment for table cell.\n * @property {Object} [rowProps = {}] rowProps object for the TableRow.\n * @property {(string|node)} [children = null] Children for the Table Row.\n */\n\n\nTableRow.propTypes = {\n  rowData: PropTypes.instanceOf(Object),\n  className: PropTypes.string,\n  tableCellClassName: PropTypes.string,\n  columnAlignment: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  rowProps: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.instanceOf(Object))\n  })\n};\nTableRow.defaultProps = {\n  rowData: {},\n  className: '',\n  columnAlignment: 'default',\n  tableCellClassName: '',\n  children: null,\n  rowProps: {\n    columns: []\n  }\n};\n/**\n * TableHeaderCell component contains native th tag implementation, which can also be called from a custom Header component.\n * Sorting can also be added with headers passed as config.\n * @class\n * @param {TableHeaderCell~propTypes} props - TableHeaderCell props.\n * @returns {ReactElement}\n */\n\nconst TableHeaderCell = props => {\n  const {\n    headerCelldata,\n    children,\n    paddingLevelHeaderY,\n    paddingLevelHeaderX,\n    className,\n    sortMethod,\n    activeSort,\n    desktop,\n    mobile,\n    ...otherProps\n  } = props; // Return blank if not meeting device requirements\n\n  if (desktop && isMobileDevice()) return null;\n  if (mobile && !isMobileDevice()) return null;\n  const headerClasses = classnames('table-header-cell', `py-${paddingLevelHeaderY}x`, `px-${paddingLevelHeaderX}x`, className);\n  let headerLabel = headerCelldata;\n  let key;\n  let htmlProps = {};\n  const sortProps = {};\n\n  if (typeof headerLabel === 'object') {\n    const {\n      label,\n      sortKey,\n      desc,\n      ...remProps\n    } = headerCelldata;\n    htmlProps = remProps;\n    headerLabel = label;\n\n    if (sortKey) {\n      sortProps.onClick = () => sortMethod(sortKey, desc);\n\n      key = sortKey;\n    }\n  }\n\n  return headerLabel !== null && /*#__PURE__*/React.createElement(\"th\", Object.assign({\n    className: headerClasses\n  }, otherProps, htmlProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }), children || headerLabel, key && /*#__PURE__*/React.createElement(Button, Object.assign({\n    variant: \"link\"\n  }, sortProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CustomIcon, {\n    color: activeSort === key ? '#7c7c7c' : '#cccccc',\n    type: headerCelldata.desc ? 'downArrow' : 'upArrow',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  })));\n};\n/**\n * Complete props of TableHeaderCell.\n * @typedef {Object} TableHeaderCell~propTypes\n * @property {Object|string} [headerCelldata=''] This hold headerCelldata for the headerCell.\n * @property {string} [className=''] ClassName for TableHeader cell.\n * @property {string} [activeSort='' ] Active Sort.\n * @property {func} [sortMethod=()=>{}] function for Active Sort.\n * @property {(string|node)} [children=null] Children for the Table Row.\n * @property {number} [paddingLevelHeaderY=1] paddingLevelHeaderY for the TableHeaderCell.\n * @property {number} [paddingLevelHeaderX=0] paddingLevelHeaderX for the TableHeaderCell.\n * @property {bool} [mobile=false] - to be displayed only on mobile.\n * @property {bool} [desktop=false] - to be displayed only on desktop.\n */\n\n\nTableHeaderCell.propTypes = {\n  headerCelldata: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n    label: PropTypes.string.isRequired\n  })]),\n  className: PropTypes.string,\n  paddingLevelHeaderY: PropTypes.number,\n  paddingLevelHeaderX: PropTypes.number,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  sortMethod: PropTypes.func,\n  activeSort: PropTypes.string,\n  mobile: PropTypes.bool,\n  desktop: PropTypes.bool\n};\nTableHeaderCell.defaultProps = {\n  headerCelldata: '',\n  className: '',\n  paddingLevelHeaderY: 1,\n  paddingLevelHeaderX: 0,\n  children: null,\n  sortMethod: () => {},\n  activeSort: '',\n  mobile: false,\n  desktop: false\n};\n/**\n * TableHeader component contains native tr tag implementation and is generally a Default Header component which renders the Header for the Table.\n * @class\n * @param {TableHeader~propTypes} props - TableHeader props.\n * @returns {ReactElement}\n */\n\nconst TableHeader = props => {\n  const {\n    header,\n    children,\n    className,\n    columnAlignment,\n    tableHeaderCellClassName,\n    ...otherProps\n  } = props;\n  const tableHeaderClasses = classnames('table-header', className);\n  const allChild = React.Children.toArray(children);\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    className: tableHeaderClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }\n  }, children && allChild.map(child => React.cloneElement(child, { ...otherProps\n  })) || header.map((headerCelldata, idx) => /*#__PURE__*/React.createElement(TableHeaderCell, Object.assign({\n    headerCelldata: headerCelldata,\n    key: `header-cell-${idx}`,\n    align: setAlignment(columnAlignment, idx),\n    className: tableHeaderCellClassName\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  }))));\n};\n/**\n * Complete props of TableHeader.\n * @typedef {Object} TableHeader~propTypes\n *\n * @property {(string[]|Object[])} [header=[]] This is data for the tableHeader.\n * @property {string} [className=''] ClassName for TableHeader cell.\n * @property {string} [tableHeaderCellClassName=''] tableHeaderCellClassName.\n * @property {(string|node)} [children=null] Children for the Table Row.\n */\n\n\nTableHeader.propTypes = {\n  header: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Object)])),\n  className: PropTypes.string,\n  tableHeaderCellClassName: PropTypes.string,\n  columnAlignment: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\nTableHeader.defaultProps = {\n  header: [],\n  className: '',\n  columnAlignment: 'default',\n  tableHeaderCellClassName: '',\n  children: null\n};\n/**\n * Table component is creating a table with defined header and data rows.\n * It consumes different components like TableHeader, TableRow and TableCell which can either be custom or default.\n * Supports sorting as well.\n * @class\n * @param {Table~propTypes} props - Table props.\n * @returns {ReactElement}\n */\n\nconst Table = props => {\n  const {\n    rowsData,\n    header,\n    customRow,\n    customHeader,\n    noBorder,\n    noLastBorder,\n    tableClassName,\n    tableHeaderClassName,\n    tableHeaderCellClassName,\n    tableRowClassName,\n    tableBodyClassName,\n    tableBodySize,\n    tableHeaderSize,\n    rowProps,\n    showNoDataState,\n    tableCellClassName,\n    paddingLevelHeaderX,\n    paddingLevelHeaderY,\n    paddingLevelX,\n    paddingLevelY,\n    ...otherProps\n  } = props;\n  const RowComponent = customRow || TableRow;\n  const HeaderComponent = customHeader || TableHeader;\n  const tableClasses = classnames('default-table', noBorder && 'no-border', noLastBorder && 'no-last-border', tableClassName);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: tableClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }\n  }, header && /*#__PURE__*/React.createElement(\"thead\", {\n    className: classnames('table-head', `table-head-${tableHeaderSize}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(HeaderComponent, Object.assign({\n    header: header,\n    className: tableHeaderClassName,\n    tableHeaderCellClassName: tableHeaderCellClassName,\n    paddingLevelHeaderX: paddingLevelHeaderX,\n    paddingLevelHeaderY: paddingLevelHeaderY\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"tbody\", {\n    className: classnames('table-body', tableBodyClassName, `table-body-${tableBodySize}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }\n  }, rowsData.map((rowData, index) => /*#__PURE__*/React.createElement(RowComponent, Object.assign({\n    rowData: rowData,\n    key: `row-${index}`,\n    className: tableRowClassName,\n    rowProps: rowProps,\n    showNoDataState: showNoDataState,\n    tableCellClassName: tableCellClassName,\n    paddingLevelX: paddingLevelX,\n    paddingLevelY: paddingLevelY\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }\n  }))))));\n};\n/**\n * Complete props of Table.\n * @typedef {Object} Table~propTypes\n *\n * @property {rowsData} - This is rowsData for the table.\n * @property {(string[]|Object[])} [header=null] Header as array of string or object.\n * @property {func} [customRow=null] CustomRow Component..\n * @property {func} [customHeader=null] CustomeHeader Component.\n * @property {bool} [noBorder=false] Flag for NoBorder variant.\n * @property {bool} [showNoDataState=false] Flag for NoData State.\n * @property {number} [paddingLevelHeaderY=1] PaddingLevelY for the TableHeaderCell.\n * @property {number} [paddingLevelHeaderX=0] PaddingLevelX for the TableHeaderCell.\n * @property {number} [paddingLevelY=2] PaddingLevelY for the TableBodyCell.\n * @property {number} [paddingLevelX=0] PaddingLevelX for the TableBodyCell.\n * @property {string} [tableClassName=''] This variable is used to override the default table styling.\n * @property {string} [tableHeaderClassName=''] This variable is used to override the default table header styling.\n * @property {string} [tableHeaderCellClassName=''] This variable is used to override the default table header cell styling.\n * @property {string} [tableRowClassName=''] This variable is used to override the default table row styling.\n * @property {string} [tableCellClassName=''] This variable is used to override the default table cell styling.\n * @property {string} [tableBodyClassName=''] This variable is used to override the default table body styling.\n * @property {bool} [noLastBorder=false] Flag for no last border variant.\n * @property {('small'|'medium'|'large')} [tableHeaderSize='medium'] This is used to set the size for Header.\n * @property {('default'|'left'|'right'|'center')} [columnAlignment='default'] This is used to set the alignment for each column.\n * @property {('small'|'medium'|'large')}  [tableBodySize='medium'] This is used to set the size for body content.\n * @property {object} [rowProps={}] Custom rows props for the rows.\n * @property {object} [columns=[]] Columns props for the rows\n */\n\n\nTable.propTypes = {\n  rowsData: PropTypes.arrayOf(PropTypes.instanceOf(Object)).isRequired,\n  header: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Object)])),\n  customRow: PropTypes.func,\n  customHeader: PropTypes.func,\n  noBorder: PropTypes.bool,\n  showNoDataState: PropTypes.bool,\n  paddingLevelHeaderY: PropTypes.number,\n  paddingLevelHeaderX: PropTypes.number,\n  paddingLevelY: PropTypes.number,\n  paddingLevelX: PropTypes.number,\n  tableClassName: PropTypes.string,\n  tableHeaderClassName: PropTypes.string,\n  tableHeaderCellClassName: PropTypes.string,\n  tableRowClassName: PropTypes.string,\n  tableCellClassName: PropTypes.string,\n  tableBodyClassName: PropTypes.string,\n  noLastBorder: PropTypes.bool,\n  tableHeaderSize: PropTypes.oneOf(['small', 'medium', 'large']),\n  columnAlignment: PropTypes.oneOf(['default', 'left', 'right', 'center']),\n  tableBodySize: PropTypes.oneOf(['small', 'medium', 'large']),\n  rowProps: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.instanceOf(Object))\n  })\n};\nTable.defaultProps = {\n  header: null,\n  customRow: null,\n  customHeader: null,\n  noBorder: false,\n  showNoDataState: true,\n  paddingLevelHeaderY: 1,\n  paddingLevelHeaderX: 0,\n  paddingLevelY: 2,\n  paddingLevelX: 0,\n  tableClassName: '',\n  tableHeaderClassName: '',\n  tableHeaderCellClassName: '',\n  tableRowClassName: '',\n  tableCellClassName: '',\n  tableBodyClassName: '',\n  noLastBorder: false,\n  tableHeaderSize: 'medium',\n  tableBodySize: 'medium',\n  columnAlignment: 'default',\n  rowProps: {\n    columns: []\n  }\n};\nexport { Table, TableHeader, TableHeaderCell, TableRow, TableCell };","map":{"version":3,"sources":["/Users/santando/xlbas-project/src/common/Table/index.js"],"names":["React","classnames","PropTypes","NO_DATA_STATE","setAlignment","aligmentProp","index","align","TableCell","props","cellData","children","className","width","paddingLevelY","paddingLevelX","showNoDataState","desktop","mobile","otherProps","tableCellClasses","minWidth","propTypes","oneOfType","string","node","number","bool","defaultProps","TableRow","rowData","tableCellClassName","columnAlignment","rowProps","columns","tableRowClasses","allChild","Children","toArray","map","child","cloneElement","length","key","htmlProps","Object","values","celldata","instanceOf","shape","arrayOf","TableHeaderCell","headerCelldata","paddingLevelHeaderY","paddingLevelHeaderX","sortMethod","activeSort","isMobileDevice","headerClasses","headerLabel","sortProps","label","sortKey","desc","remProps","onClick","isRequired","func","TableHeader","header","tableHeaderCellClassName","tableHeaderClasses","idx","Table","rowsData","customRow","customHeader","noBorder","noLastBorder","tableClassName","tableHeaderClassName","tableRowClassName","tableBodyClassName","tableBodySize","tableHeaderSize","RowComponent","HeaderComponent","tableClasses","oneOf"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './table.css';\n// import CustomIcon from '../../../atoms/Icons';\n\nconst NO_DATA_STATE = '-';\n\n/**\n * This function return the alignment property based on the prop coming\n * @memberof TableHeader\n * @param {string} Alignment property coming in props\n * @param {number} index\n * @returns {string} Alignment property\n */\nconst setAlignment = (aligmentProp, index) => {\n  let align = 'left';\n  if (aligmentProp === 'default' && index !== 0) {\n    align = 'right';\n  }\n\n  if (aligmentProp === 'right') {\n    align = 'right';\n  }\n\n  if (aligmentProp === 'center') {\n    align = 'center';\n  }\n\n  return align;\n};\n\n/**\n * TableCell component contains native td tag implementation with some classes to handle the padding horizontally/vertically\n * DataNot Available state can also be handled.\n * @class\n * @param {TableCell~propTypes} props - TableCell props.\n * @returns {ReactElement}\n */\nconst TableCell = props => {\n  const {\n    cellData,\n    children,\n    className,\n    width,\n    paddingLevelY,\n    paddingLevelX,\n    showNoDataState,\n    desktop,\n    mobile,\n    ...otherProps\n  } = props;\n\n  // Return blank if not meeting device requirements\n\n  const tableCellClasses = classnames('table-cell', `py-${paddingLevelY}x`, `px-${paddingLevelX}x`, className);\n  return (\n    <td className={tableCellClasses} style={{ minWidth: width, width }} {...otherProps}>\n      {children || cellData || (showNoDataState && NO_DATA_STATE)}\n    </td>\n  );\n};\n\n/**\n * Complete props of TableCell.\n * @typedef {Object} TableCell~propTypes\n * @property {(string|node)} [cellData=''] This hold the data/node to be displayed on the cell.\n * @property {string} [className=''] className for the TableCell.\n * @property {string} [width='auto'] width for the Table Cell.\n * @property {number} [paddingLevelY=2] paddingLevelY for the tabelCell.\n * @property {number} [paddingLevelX=0] paddingLevelX for the tabelCell.\n * @property {bool} [showNoDataState=true] Flag for the no Data State.\n * @property {(string|node)} [children=null] children for the Table Cell.\n * @property {bool} [mobile=false] - to be displayed only on mobile.\n * @property {bool} [desktop=false] - to be displayed only on desktop.\n */\nTableCell.propTypes = {\n  cellData: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  width: PropTypes.string,\n  paddingLevelY: PropTypes.number,\n  paddingLevelX: PropTypes.number,\n  showNoDataState: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  mobile: PropTypes.bool,\n  desktop: PropTypes.bool,\n};\n\nTableCell.defaultProps = {\n  cellData: '',\n  className: '',\n  width: 'auto',\n  children: null,\n  showNoDataState: true,\n  paddingLevelY: 2,\n  paddingLevelX: 0,\n  mobile: false,\n  desktop: false,\n};\n\n/**\n * This component is responsible to render the TableRow component, this is a default TableRow called\n * from the Table Component. default Columns can either be created from data or with rowProps.\n * @class\n * @param {TableRow~propTypes} props - TableRow props.\n * @returns {ReactElement}\n */\nconst TableRow = props => {\n  const {\n    rowData,\n    children,\n    className,\n    tableCellClassName,\n    columnAlignment,\n    rowProps: { columns },\n    ...otherProps\n  } = props;\n  const tableRowClasses = classnames('table-row', className);\n  const allChild = React.Children.toArray(children);\n\n  return (\n    <tr className={tableRowClasses}>\n      {(children && allChild.map(child => React.cloneElement(child, { ...otherProps }))) ||\n        (columns && columns.length\n          ? columns.map(\n              ({ key, ...htmlProps }, index) =>\n                key && (\n                  <TableCell\n                    cellData={rowData[key]}\n                    key={`cell-${index}`}\n                    align={setAlignment(columnAlignment, index)}\n                    className={tableCellClassName}\n                    {...otherProps}\n                    {...htmlProps}\n                  />\n                )\n            )\n          : Object.values(rowData).map((celldata, index) => (\n              <TableCell cellData={celldata} key={`cell-${index}`} className={tableCellClassName} {...otherProps} />\n            )))}\n    </tr>\n  );\n};\n\n/**\n * Complete props of TableRow.\n * @typedef {Object} TableRow~propTypes\n * @property {Object} [rowData={}] This hold the rowData for the Row.\n * @property {string} [className=''] ClassName for the TableRow.\n * @property {string} [tableCellClassName = ''] tableCellClassName for table cell.\n * @property {string} columnAlignment columnAlignment for table cell.\n * @property {Object} [rowProps = {}] rowProps object for the TableRow.\n * @property {(string|node)} [children = null] Children for the Table Row.\n */\nTableRow.propTypes = {\n  rowData: PropTypes.instanceOf(Object),\n  className: PropTypes.string,\n  tableCellClassName: PropTypes.string,\n  columnAlignment: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  rowProps: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.instanceOf(Object)),\n  }),\n};\n\nTableRow.defaultProps = {\n  rowData: {},\n  className: '',\n  columnAlignment: 'default',\n  tableCellClassName: '',\n  children: null,\n  rowProps: {\n    columns: [],\n  },\n};\n\n/**\n * TableHeaderCell component contains native th tag implementation, which can also be called from a custom Header component.\n * Sorting can also be added with headers passed as config.\n * @class\n * @param {TableHeaderCell~propTypes} props - TableHeaderCell props.\n * @returns {ReactElement}\n */\nconst TableHeaderCell = props => {\n  const {\n    headerCelldata,\n    children,\n    paddingLevelHeaderY,\n    paddingLevelHeaderX,\n    className,\n    sortMethod,\n    activeSort,\n    desktop,\n    mobile,\n    ...otherProps\n  } = props;\n\n  // Return blank if not meeting device requirements\n  if (desktop && isMobileDevice()) return null;\n  if (mobile && !isMobileDevice()) return null;\n\n  const headerClasses = classnames(\n    'table-header-cell',\n    `py-${paddingLevelHeaderY}x`,\n    `px-${paddingLevelHeaderX}x`,\n    className\n  );\n  let headerLabel = headerCelldata;\n  let key;\n  let htmlProps = {};\n  const sortProps = {};\n  if (typeof headerLabel === 'object') {\n    const { label, sortKey, desc, ...remProps } = headerCelldata;\n    htmlProps = remProps;\n    headerLabel = label;\n    if (sortKey) {\n      sortProps.onClick = () => sortMethod(sortKey, desc);\n      key = sortKey;\n    }\n  }\n  return (\n    headerLabel !== null && (\n      <th className={headerClasses} {...otherProps} {...htmlProps}>\n        {children || headerLabel}\n        {key && (\n          <Button variant=\"link\" {...sortProps}>\n            <CustomIcon\n              color={activeSort === key ? '#7c7c7c' : '#cccccc'}\n              type={headerCelldata.desc ? 'downArrow' : 'upArrow'}\n            />\n          </Button>\n        )}\n      </th>\n    )\n  );\n};\n\n/**\n * Complete props of TableHeaderCell.\n * @typedef {Object} TableHeaderCell~propTypes\n * @property {Object|string} [headerCelldata=''] This hold headerCelldata for the headerCell.\n * @property {string} [className=''] ClassName for TableHeader cell.\n * @property {string} [activeSort='' ] Active Sort.\n * @property {func} [sortMethod=()=>{}] function for Active Sort.\n * @property {(string|node)} [children=null] Children for the Table Row.\n * @property {number} [paddingLevelHeaderY=1] paddingLevelHeaderY for the TableHeaderCell.\n * @property {number} [paddingLevelHeaderX=0] paddingLevelHeaderX for the TableHeaderCell.\n * @property {bool} [mobile=false] - to be displayed only on mobile.\n * @property {bool} [desktop=false] - to be displayed only on desktop.\n */\nTableHeaderCell.propTypes = {\n  headerCelldata: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n    }),\n  ]),\n  className: PropTypes.string,\n  paddingLevelHeaderY: PropTypes.number,\n  paddingLevelHeaderX: PropTypes.number,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  sortMethod: PropTypes.func,\n  activeSort: PropTypes.string,\n  mobile: PropTypes.bool,\n  desktop: PropTypes.bool,\n};\n\nTableHeaderCell.defaultProps = {\n  headerCelldata: '',\n  className: '',\n  paddingLevelHeaderY: 1,\n  paddingLevelHeaderX: 0,\n  children: null,\n  sortMethod: () => {},\n  activeSort: '',\n  mobile: false,\n  desktop: false,\n};\n\n/**\n * TableHeader component contains native tr tag implementation and is generally a Default Header component which renders the Header for the Table.\n * @class\n * @param {TableHeader~propTypes} props - TableHeader props.\n * @returns {ReactElement}\n */\nconst TableHeader = props => {\n  const { header, children, className, columnAlignment, tableHeaderCellClassName, ...otherProps } = props;\n  const tableHeaderClasses = classnames('table-header', className);\n  const allChild = React.Children.toArray(children);\n  return (\n    <tr className={tableHeaderClasses}>\n      {(children && allChild.map(child => React.cloneElement(child, { ...otherProps }))) ||\n        header.map((headerCelldata, idx) => (\n          <TableHeaderCell\n            headerCelldata={headerCelldata}\n            key={`header-cell-${idx}`}\n            align={setAlignment(columnAlignment, idx)}\n            className={tableHeaderCellClassName}\n            {...otherProps}\n          />\n        ))}\n    </tr>\n  );\n};\n\n/**\n * Complete props of TableHeader.\n * @typedef {Object} TableHeader~propTypes\n *\n * @property {(string[]|Object[])} [header=[]] This is data for the tableHeader.\n * @property {string} [className=''] ClassName for TableHeader cell.\n * @property {string} [tableHeaderCellClassName=''] tableHeaderCellClassName.\n * @property {(string|node)} [children=null] Children for the Table Row.\n */\nTableHeader.propTypes = {\n  header: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Object)])),\n  className: PropTypes.string,\n  tableHeaderCellClassName: PropTypes.string,\n  columnAlignment: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n};\n\nTableHeader.defaultProps = {\n  header: [],\n  className: '',\n  columnAlignment: 'default',\n  tableHeaderCellClassName: '',\n  children: null,\n};\n\n/**\n * Table component is creating a table with defined header and data rows.\n * It consumes different components like TableHeader, TableRow and TableCell which can either be custom or default.\n * Supports sorting as well.\n * @class\n * @param {Table~propTypes} props - Table props.\n * @returns {ReactElement}\n */\nconst Table = props => {\n  const {\n    rowsData,\n    header,\n    customRow,\n    customHeader,\n    noBorder,\n    noLastBorder,\n    tableClassName,\n    tableHeaderClassName,\n    tableHeaderCellClassName,\n    tableRowClassName,\n    tableBodyClassName,\n    tableBodySize,\n    tableHeaderSize,\n    rowProps,\n    showNoDataState,\n    tableCellClassName,\n    paddingLevelHeaderX,\n    paddingLevelHeaderY,\n    paddingLevelX,\n    paddingLevelY,\n    ...otherProps\n  } = props;\n  const RowComponent = customRow || TableRow;\n  const HeaderComponent = customHeader || TableHeader;\n  const tableClasses = classnames(\n    'default-table',\n    noBorder && 'no-border',\n    noLastBorder && 'no-last-border',\n    tableClassName\n  );\n\n  return (\n    <div className=\"table-wrapper\">\n      <table className={tableClasses}>\n        {header && (\n          <thead className={classnames('table-head', `table-head-${tableHeaderSize}`)}>\n            <HeaderComponent\n              header={header}\n              className={tableHeaderClassName}\n              tableHeaderCellClassName={tableHeaderCellClassName}\n              paddingLevelHeaderX={paddingLevelHeaderX}\n              paddingLevelHeaderY={paddingLevelHeaderY}\n              {...otherProps}\n            />\n          </thead>\n        )}\n        <tbody className={classnames('table-body', tableBodyClassName, `table-body-${tableBodySize}`)}>\n          {rowsData.map((rowData, index) => (\n            <RowComponent\n              rowData={rowData}\n              key={`row-${index}`}\n              className={tableRowClassName}\n              rowProps={rowProps}\n              showNoDataState={showNoDataState}\n              tableCellClassName={tableCellClassName}\n              paddingLevelX={paddingLevelX}\n              paddingLevelY={paddingLevelY}\n              {...otherProps}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n/**\n * Complete props of Table.\n * @typedef {Object} Table~propTypes\n *\n * @property {rowsData} - This is rowsData for the table.\n * @property {(string[]|Object[])} [header=null] Header as array of string or object.\n * @property {func} [customRow=null] CustomRow Component..\n * @property {func} [customHeader=null] CustomeHeader Component.\n * @property {bool} [noBorder=false] Flag for NoBorder variant.\n * @property {bool} [showNoDataState=false] Flag for NoData State.\n * @property {number} [paddingLevelHeaderY=1] PaddingLevelY for the TableHeaderCell.\n * @property {number} [paddingLevelHeaderX=0] PaddingLevelX for the TableHeaderCell.\n * @property {number} [paddingLevelY=2] PaddingLevelY for the TableBodyCell.\n * @property {number} [paddingLevelX=0] PaddingLevelX for the TableBodyCell.\n * @property {string} [tableClassName=''] This variable is used to override the default table styling.\n * @property {string} [tableHeaderClassName=''] This variable is used to override the default table header styling.\n * @property {string} [tableHeaderCellClassName=''] This variable is used to override the default table header cell styling.\n * @property {string} [tableRowClassName=''] This variable is used to override the default table row styling.\n * @property {string} [tableCellClassName=''] This variable is used to override the default table cell styling.\n * @property {string} [tableBodyClassName=''] This variable is used to override the default table body styling.\n * @property {bool} [noLastBorder=false] Flag for no last border variant.\n * @property {('small'|'medium'|'large')} [tableHeaderSize='medium'] This is used to set the size for Header.\n * @property {('default'|'left'|'right'|'center')} [columnAlignment='default'] This is used to set the alignment for each column.\n * @property {('small'|'medium'|'large')}  [tableBodySize='medium'] This is used to set the size for body content.\n * @property {object} [rowProps={}] Custom rows props for the rows.\n * @property {object} [columns=[]] Columns props for the rows\n */\nTable.propTypes = {\n  rowsData: PropTypes.arrayOf(PropTypes.instanceOf(Object)).isRequired,\n  header: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Object)])),\n  customRow: PropTypes.func,\n  customHeader: PropTypes.func,\n  noBorder: PropTypes.bool,\n  showNoDataState: PropTypes.bool,\n  paddingLevelHeaderY: PropTypes.number,\n  paddingLevelHeaderX: PropTypes.number,\n  paddingLevelY: PropTypes.number,\n  paddingLevelX: PropTypes.number,\n  tableClassName: PropTypes.string,\n  tableHeaderClassName: PropTypes.string,\n  tableHeaderCellClassName: PropTypes.string,\n  tableRowClassName: PropTypes.string,\n  tableCellClassName: PropTypes.string,\n  tableBodyClassName: PropTypes.string,\n  noLastBorder: PropTypes.bool,\n  tableHeaderSize: PropTypes.oneOf(['small', 'medium', 'large']),\n  columnAlignment: PropTypes.oneOf(['default', 'left', 'right', 'center']),\n  tableBodySize: PropTypes.oneOf(['small', 'medium', 'large']),\n  rowProps: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.instanceOf(Object)),\n  }),\n};\n\nTable.defaultProps = {\n  header: null,\n  customRow: null,\n  customHeader: null,\n  noBorder: false,\n  showNoDataState: true,\n  paddingLevelHeaderY: 1,\n  paddingLevelHeaderX: 0,\n  paddingLevelY: 2,\n  paddingLevelX: 0,\n  tableClassName: '',\n  tableHeaderClassName: '',\n  tableHeaderCellClassName: '',\n  tableRowClassName: '',\n  tableCellClassName: '',\n  tableBodyClassName: '',\n  noLastBorder: false,\n  tableHeaderSize: 'medium',\n  tableBodySize: 'medium',\n  columnAlignment: 'default',\n  rowProps: {\n    columns: [],\n  },\n};\nexport { Table, TableHeader, TableHeaderCell, TableRow, TableCell };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _util = require('../util');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar cloneNode = function cloneNode(obj, parent) {\n  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) {\n    return obj;\n  }\n\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) {\n      continue;\n    }\n\n    var value = obj[i];\n    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      cloned[i] = cloneNode(value, cloned);\n    }\n  }\n\n  return cloned;\n};\n\nvar Node = function () {\n  function Node() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Node);\n\n    Object.assign(this, opts);\n    this.spaces = this.spaces || {};\n    this.spaces.before = this.spaces.before || '';\n    this.spaces.after = this.spaces.after || '';\n  }\n\n  Node.prototype.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  };\n\n  Node.prototype.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var index in arguments) {\n        this.parent.insertBefore(this, arguments[index]);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  };\n\n  Node.prototype.next = function next() {\n    return this.parent.at(this.parent.index(this) + 1);\n  };\n\n  Node.prototype.prev = function prev() {\n    return this.parent.at(this.parent.index(this) - 1);\n  };\n\n  Node.prototype.clone = function clone() {\n    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var cloned = cloneNode(this);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  };\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows non standard syntax to be appended to an existing property\n   * by specifying the escaped value. By specifying the escaped value,\n   * illegal characters are allowed to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped optional. the escaped value of the property.\n   */\n\n\n  Node.prototype.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    var originalValue = this[name];\n    var originalEscaped = this.raws[name];\n    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (originalEscaped || valueEscaped !== value) {\n      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n    } else {\n      delete this.raws[name]; // delete any escaped value that was created by the setter.\n    }\n  };\n  /**\n   * Some non-standard syntax doesn't follow normal escaping rules for css.\n   * This allows the escaped value to be specified directly, allowing illegal\n   * characters to be directly inserted into css output.\n   * @param {string} name the property to set\n   * @param {any} value the unescaped value of the property\n   * @param {string} valueEscaped the escaped value of the property.\n   */\n\n\n  Node.prototype.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n    if (!this.raws) {\n      this.raws = {};\n    }\n\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    this.raws[name] = valueEscaped;\n  };\n  /**\n   * When you want a value to passed through to CSS directly. This method\n   * deletes the corresponding raw value causing the stringifier to fallback\n   * to the unescaped value.\n   * @param {string} name the property to set.\n   * @param {any} value The value that is both escaped and unescaped.\n   */\n\n\n  Node.prototype.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n\n    if (this.raws) {\n      delete this.raws[name];\n    }\n  };\n  /**\n   * \n   * @param {number} line The number (starting with 1)\n   * @param {number} column The column number (starting with 1)\n   */\n\n\n  Node.prototype.isAtPosition = function isAtPosition(line, column) {\n    if (this.source && this.source.start && this.source.end) {\n      if (this.source.start.line > line) {\n        return false;\n      }\n\n      if (this.source.end.line < line) {\n        return false;\n      }\n\n      if (this.source.start.line === line && this.source.start.column > column) {\n        return false;\n      }\n\n      if (this.source.end.line === line && this.source.end.column < column) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return undefined;\n  };\n\n  Node.prototype.stringifyProperty = function stringifyProperty(name) {\n    return this.raws && this.raws[name] || this[name];\n  };\n\n  Node.prototype.toString = function toString() {\n    return [this.rawSpaceBefore, String(this.stringifyProperty(\"value\")), this.rawSpaceAfter].join('');\n  };\n\n  _createClass(Node, [{\n    key: 'rawSpaceBefore',\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces && this.spaces.before;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.before = raw;\n    }\n  }, {\n    key: 'rawSpaceAfter',\n    get: function get() {\n      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n\n      if (rawSpace === undefined) {\n        rawSpace = this.spaces.after;\n      }\n\n      return rawSpace || \"\";\n    },\n    set: function set(raw) {\n      (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n      this.raws.spaces.after = raw;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports.default = Node;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/santando/xlbas-project/node_modules/postcss-selector-parser/dist/selectors/node.js"],"names":["exports","__esModule","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_typeof","Symbol","iterator","obj","constructor","_util","require","_classCallCheck","instance","TypeError","cloneNode","parent","cloned","hasOwnProperty","value","type","Array","map","j","Node","opts","arguments","undefined","assign","spaces","before","after","remove","removeChild","replaceWith","index","insertBefore","next","at","prev","clone","overrides","name","appendToPropertyAndEscape","valueEscaped","raws","originalValue","originalEscaped","setPropertyAndEscape","setPropertyWithoutEscape","isAtPosition","line","column","source","start","end","stringifyProperty","toString","rawSpaceBefore","String","rawSpaceAfter","join","get","rawSpace","set","raw","ensureObject","default","module"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _util = require('../util');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar cloneNode = function cloneNode(obj, parent) {\n    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) {\n        return obj;\n    }\n\n    var cloned = new obj.constructor();\n\n    for (var i in obj) {\n        if (!obj.hasOwnProperty(i)) {\n            continue;\n        }\n        var value = obj[i];\n        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n        if (i === 'parent' && type === 'object') {\n            if (parent) {\n                cloned[i] = parent;\n            }\n        } else if (value instanceof Array) {\n            cloned[i] = value.map(function (j) {\n                return cloneNode(j, cloned);\n            });\n        } else {\n            cloned[i] = cloneNode(value, cloned);\n        }\n    }\n\n    return cloned;\n};\n\nvar Node = function () {\n    function Node() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Node);\n\n        Object.assign(this, opts);\n        this.spaces = this.spaces || {};\n        this.spaces.before = this.spaces.before || '';\n        this.spaces.after = this.spaces.after || '';\n    }\n\n    Node.prototype.remove = function remove() {\n        if (this.parent) {\n            this.parent.removeChild(this);\n        }\n        this.parent = undefined;\n        return this;\n    };\n\n    Node.prototype.replaceWith = function replaceWith() {\n        if (this.parent) {\n            for (var index in arguments) {\n                this.parent.insertBefore(this, arguments[index]);\n            }\n            this.remove();\n        }\n        return this;\n    };\n\n    Node.prototype.next = function next() {\n        return this.parent.at(this.parent.index(this) + 1);\n    };\n\n    Node.prototype.prev = function prev() {\n        return this.parent.at(this.parent.index(this) - 1);\n    };\n\n    Node.prototype.clone = function clone() {\n        var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var cloned = cloneNode(this);\n        for (var name in overrides) {\n            cloned[name] = overrides[name];\n        }\n        return cloned;\n    };\n\n    /**\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\n     * This allows non standard syntax to be appended to an existing property\n     * by specifying the escaped value. By specifying the escaped value,\n     * illegal characters are allowed to be directly inserted into css output.\n     * @param {string} name the property to set\n     * @param {any} value the unescaped value of the property\n     * @param {string} valueEscaped optional. the escaped value of the property.\n     */\n\n\n    Node.prototype.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {\n        if (!this.raws) {\n            this.raws = {};\n        }\n        var originalValue = this[name];\n        var originalEscaped = this.raws[name];\n        this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n        if (originalEscaped || valueEscaped !== value) {\n            this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n        } else {\n            delete this.raws[name]; // delete any escaped value that was created by the setter.\n        }\n    };\n\n    /**\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\n     * This allows the escaped value to be specified directly, allowing illegal\n     * characters to be directly inserted into css output.\n     * @param {string} name the property to set\n     * @param {any} value the unescaped value of the property\n     * @param {string} valueEscaped the escaped value of the property.\n     */\n\n\n    Node.prototype.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {\n        if (!this.raws) {\n            this.raws = {};\n        }\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n        this.raws[name] = valueEscaped;\n    };\n\n    /**\n     * When you want a value to passed through to CSS directly. This method\n     * deletes the corresponding raw value causing the stringifier to fallback\n     * to the unescaped value.\n     * @param {string} name the property to set.\n     * @param {any} value The value that is both escaped and unescaped.\n     */\n\n\n    Node.prototype.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n        if (this.raws) {\n            delete this.raws[name];\n        }\n    };\n\n    /**\n     * \n     * @param {number} line The number (starting with 1)\n     * @param {number} column The column number (starting with 1)\n     */\n\n\n    Node.prototype.isAtPosition = function isAtPosition(line, column) {\n        if (this.source && this.source.start && this.source.end) {\n            if (this.source.start.line > line) {\n                return false;\n            }\n            if (this.source.end.line < line) {\n                return false;\n            }\n            if (this.source.start.line === line && this.source.start.column > column) {\n                return false;\n            }\n            if (this.source.end.line === line && this.source.end.column < column) {\n                return false;\n            }\n            return true;\n        }\n        return undefined;\n    };\n\n    Node.prototype.stringifyProperty = function stringifyProperty(name) {\n        return this.raws && this.raws[name] || this[name];\n    };\n\n    Node.prototype.toString = function toString() {\n        return [this.rawSpaceBefore, String(this.stringifyProperty(\"value\")), this.rawSpaceAfter].join('');\n    };\n\n    _createClass(Node, [{\n        key: 'rawSpaceBefore',\n        get: function get() {\n            var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n            if (rawSpace === undefined) {\n                rawSpace = this.spaces && this.spaces.before;\n            }\n            return rawSpace || \"\";\n        },\n        set: function set(raw) {\n            (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n            this.raws.spaces.before = raw;\n        }\n    }, {\n        key: 'rawSpaceAfter',\n        get: function get() {\n            var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n            if (rawSpace === undefined) {\n                rawSpace = this.spaces.after;\n            }\n            return rawSpace || \"\";\n        },\n        set: function set(raw) {\n            (0, _util.ensureObject)(this, \"raws\", \"spaces\");\n            this.raws.spaces.after = raw;\n        }\n    }]);\n\n    return Node;\n}();\n\nexports.default = Node;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}
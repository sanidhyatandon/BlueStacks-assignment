{"ast":null,"code":"var _jsxFileName = \"/Users/santando/xlbas-project/src/common/TextInput/index.js\";\nimport React from 'react';\nimport classnames from 'classnames';\nimport './style/default.css';\n\nconst TextInput = props => {\n  const {\n    type,\n    id,\n    label,\n    error,\n    value,\n    onChange,\n    labelclasses,\n    classes,\n    inputClassName,\n    placeholder,\n    ariaLabel,\n    minimum,\n    disabled,\n    tabIndex,\n    refElement,\n    displayIcon,\n    autocomplete,\n    allowNegativeValue,\n    onKeyDown,\n    ...otherProps\n  } = props;\n  const wrapperClasses = classnames(classes);\n  const iconClass = displayIcon ? 'textinput-icons' : '';\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${wrapperClasses} ${iconClass}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    id: id,\n    className: `no-label ${inputClassName}`,\n    type: type,\n    value: value,\n    onChange: onChange,\n    placeholder: placeholder,\n    title: ariaLabel,\n    min: type === 'number' && !allowNegativeValue ? minimum : null,\n    step: type === 'number' ? 'any' : null,\n    disabled: disabled,\n    tabIndex: tabIndex,\n    ref: refElement\n  }, otherProps, autocomplete ? '' : {\n    autoComplete: 'off'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  })), displayIcon && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"textinput-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 23\n    }\n  }, displayIcon));\n}; // TextInput.propTypes = {\n//   tabIndex: PropTypes.number,\n//   refElement: PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n//   displayIcon: PropTypes.node,\n//   onKeyDown: PropTypes.func,\n//   allowNegativeValue: PropTypes.bool.isRequired,\n//   ariaLabel: PropTypes.string.isRequired,\n//   autocomplete: PropTypes.bool.isRequired,\n//   classes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//   disabled: PropTypes.string.isRequired,\n//   error: PropTypes.string.isRequired,\n//   id: PropTypes.string.isRequired,\n//   inputClassName: PropTypes.string.isRequired,\n//   label: PropTypes.string.isRequired,\n//   labelclasses: PropTypes.string.isRequired,\n//   minimum: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n//   placeholder: PropTypes.string.isRequired,\n//   type: PropTypes.string.isRequired,\n//   value: PropTypes.string.isRequired,\n// };\n// TextInput.defaultProps = {\n//   tabIndex: 0,\n//   refElement: undefined,\n//   displayIcon: undefined,\n//   onKeyDown: () => {},\n// };\n\n\nexport default TextInput;","map":{"version":3,"sources":["/Users/santando/xlbas-project/src/common/TextInput/index.js"],"names":["React","classnames","TextInput","props","type","id","label","error","value","onChange","labelclasses","classes","inputClassName","placeholder","ariaLabel","minimum","disabled","tabIndex","refElement","displayIcon","autocomplete","allowNegativeValue","onKeyDown","otherProps","wrapperClasses","iconClass","autoComplete"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,qBAAP;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,EAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,QANI;AAOJC,IAAAA,YAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA,cATI;AAUJC,IAAAA,WAVI;AAWJC,IAAAA,SAXI;AAYJC,IAAAA,OAZI;AAaJC,IAAAA,QAbI;AAcJC,IAAAA,QAdI;AAeJC,IAAAA,UAfI;AAgBJC,IAAAA,WAhBI;AAiBJC,IAAAA,YAjBI;AAkBJC,IAAAA,kBAlBI;AAmBJC,IAAAA,SAnBI;AAoBJ,OAAGC;AApBC,MAqBFpB,KArBJ;AAuBA,QAAMqB,cAAc,GAAGvB,UAAU,CAACU,OAAD,CAAjC;AACA,QAAMc,SAAS,GAAGN,WAAW,GAAG,iBAAH,GAAuB,EAApD;AACA,sBACE;AAAK,IAAA,SAAS,EAAG,GAAEK,cAAe,IAAGC,SAAU,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAEpB,EADN;AAEE,IAAA,SAAS,EAAG,YAAWO,cAAe,EAFxC;AAGE,IAAA,IAAI,EAAER,IAHR;AAIE,IAAA,KAAK,EAAEI,KAJT;AAKE,IAAA,QAAQ,EAAEC,QALZ;AAME,IAAA,WAAW,EAAEI,WANf;AAOE,IAAA,KAAK,EAAEC,SAPT;AAQE,IAAA,GAAG,EAAEV,IAAI,KAAK,QAAT,IAAqB,CAACiB,kBAAtB,GAA2CN,OAA3C,GAAqD,IAR5D;AASE,IAAA,IAAI,EAAEX,IAAI,KAAK,QAAT,GAAoB,KAApB,GAA4B,IATpC;AAUE,IAAA,QAAQ,EAAEY,QAVZ;AAWE,IAAA,QAAQ,EAAEC,QAXZ;AAYE,IAAA,GAAG,EAAEC;AAZP,KAaMK,UAbN,EAcOH,YAAY,GAAG,EAAH,GAAQ;AAAEM,IAAAA,YAAY,EAAE;AAAhB,GAd3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAiBGP,WAAW,iBAAI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCA,WAAjC,CAjBlB,CADF;AAqBD,CA/CD,C,CAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAejB,SAAf","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport './style/default.css';\n\nconst TextInput = props => {\n  const {\n    type,\n    id,\n    label,\n    error,\n    value,\n    onChange,\n    labelclasses,\n    classes,\n    inputClassName,\n    placeholder,\n    ariaLabel,\n    minimum,\n    disabled,\n    tabIndex,\n    refElement,\n    displayIcon,\n    autocomplete,\n    allowNegativeValue,\n    onKeyDown,\n    ...otherProps\n  } = props;\n\n  const wrapperClasses = classnames(classes);\n  const iconClass = displayIcon ? 'textinput-icons' : '';\n  return (\n    <div className={`${wrapperClasses} ${iconClass}`}>\n      <input\n        id={id}\n        className={`no-label ${inputClassName}`}\n        type={type}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        title={ariaLabel}\n        min={type === 'number' && !allowNegativeValue ? minimum : null}\n        step={type === 'number' ? 'any' : null}\n        disabled={disabled}\n        tabIndex={tabIndex}\n        ref={refElement}\n        {...otherProps}\n        {...(autocomplete ? '' : { autoComplete: 'off' })}\n      />\n      {displayIcon && <div className=\"textinput-icon\">{displayIcon}</div>}\n    </div>\n  );\n};\n\n// TextInput.propTypes = {\n//   tabIndex: PropTypes.number,\n//   refElement: PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n//   displayIcon: PropTypes.node,\n//   onKeyDown: PropTypes.func,\n//   allowNegativeValue: PropTypes.bool.isRequired,\n//   ariaLabel: PropTypes.string.isRequired,\n//   autocomplete: PropTypes.bool.isRequired,\n//   classes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//   disabled: PropTypes.string.isRequired,\n//   error: PropTypes.string.isRequired,\n//   id: PropTypes.string.isRequired,\n//   inputClassName: PropTypes.string.isRequired,\n//   label: PropTypes.string.isRequired,\n//   labelclasses: PropTypes.string.isRequired,\n//   minimum: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n//   placeholder: PropTypes.string.isRequired,\n//   type: PropTypes.string.isRequired,\n//   value: PropTypes.string.isRequired,\n// };\n\n// TextInput.defaultProps = {\n//   tabIndex: 0,\n//   refElement: undefined,\n//   displayIcon: undefined,\n//   onKeyDown: () => {},\n// };\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}
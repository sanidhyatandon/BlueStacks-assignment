{"ast":null,"code":"var _jsxFileName = \"/Users/santando/xlbas-project/src/containers/Dashboard/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport apiConfig from '../../api.config';\nimport DashboardView from '../../components/Dashboard';\nimport Loader from '../../common/Loader';\n\nconst Dashboard = () => {\n  const [campaigns, setCampaigns] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    const {\n      getCampaigns: {\n        url: getCampaignsURL\n      }\n    } = apiConfig;\n    fetch(getCampaignsURL).then(response => response.json()).then(data => {\n      setCampaigns(data);\n      setIsLoading(false);\n    }).catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"campaign-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }\n  }, campaigns && campaigns.length ? /*#__PURE__*/React.createElement(DashboardView, {\n    campaigns: campaigns,\n    actions: toggleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 6\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 6\n    }\n  }, \" No Data Available\")), isLoading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 18\n    }\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/santando/xlbas-project/src/containers/Dashboard/index.js"],"names":["React","useState","useEffect","apiConfig","DashboardView","Loader","Dashboard","campaigns","setCampaigns","isLoading","setIsLoading","showModal","setShowModal","toggleModal","getCampaigns","url","getCampaignsURL","fetch","then","response","json","data","catch","error","console","log","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACvB,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAEQ,SAAF,EAAaC,YAAb,IAA8BT,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAAEU,SAAF,EAAaC,YAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMY,WAAW,GAAG,MAAM;AACzBD,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACA,GAFD;;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACfQ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAM;AAAEI,MAAAA,YAAY,EAAE;AAAEC,QAAAA,GAAG,EAAEC;AAAP;AAAhB,QAA6Cb,SAAnD;AACAc,IAAAA,KAAK,CAACD,eAAD,CAAL,CACEE,IADF,CACQC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADrB,EAEEF,IAFF,CAEQG,IAAD,IAAU;AACfb,MAAAA,YAAY,CAACa,IAAD,CAAZ;AACAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,KALF,EAMEY,KANF,CAMSC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANnB;AAOA,GAVQ,EAUN,EAVM,CAAT;AAYA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEhB,SAAS,IAAIA,SAAS,CAACmB,MAAvB,gBACA,oBAAC,aAAD;AAAe,IAAA,SAAS,EAAEnB,SAA1B;AAAqC,IAAA,OAAO,EAAEM,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,gBAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJF,CADD,EAQEJ,SAAS,iBAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARf,CADD;AAYA,CAjCD;;AAmCA,eAAeH,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport apiConfig from '../../api.config';\nimport DashboardView from '../../components/Dashboard';\n\nimport Loader from '../../common/Loader';\n\nconst Dashboard = () => {\n\tconst [ campaigns, setCampaigns ] = useState([]);\n\tconst [ isLoading, setIsLoading ] = useState(true);\n\tconst [ showModal, setShowModal ] = useState(false);\n\n\tconst toggleModal = () => {\n\t\tsetShowModal(!showModal);\n\t};\n\n\tuseEffect(() => {\n\t\tsetIsLoading(true);\n\t\tconst { getCampaigns: { url: getCampaignsURL } } = apiConfig;\n\t\tfetch(getCampaignsURL)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCampaigns(data);\n\t\t\t\tsetIsLoading(false);\n\t\t\t})\n\t\t\t.catch((error) => console.log(error));\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"campaign-list\">\n\t\t\t\t{campaigns && campaigns.length ? (\n\t\t\t\t\t<DashboardView campaigns={campaigns} actions={toggleModal} />\n\t\t\t\t) : (\n\t\t\t\t\t<div> No Data Available</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{isLoading && <Loader />}\n\t\t</div>\n\t);\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
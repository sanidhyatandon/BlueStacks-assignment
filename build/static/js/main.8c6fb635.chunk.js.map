{"version":3,"sources":["api.config.js","common/Tab/index.js","common/Tabs/index.js","common/utilities.js","constants.js","common/Table/index.js","components/Campaigns/index.js","common/LanguageSelector/index.js","components/Dashboard/index.js","containers/Dashboard/index.js","routes/routing.js","i18n.js","App.js","serviceWorker.js","index.js"],"names":["config","getCampaigns","retry","interval","timeout","url","Tab","onClick","props","label","this","activeTab","tabTitle","className","Component","Tabs","onClickTabItem","tab","setState","state","children","map","child","key","checkDateStatus","date2","status","result","Date","setHours","Number","isMobileDevice","test","navigator","userAgent","setAlignment","aligmentProp","index","align","TableCell","cellData","width","paddingLevelY","paddingLevelX","otherProps","desktop","mobile","tableCellClasses","classnames","style","minWidth","defaultProps","showNoDataState","TableRow","rowData","tableCellClassName","columnAlignment","columns","rowProps","tableRowClasses","allChild","React","Children","toArray","cloneElement","length","htmlProps","Object","values","celldata","TableHeaderCell","headerCelldata","paddingLevelHeaderY","paddingLevelHeaderX","headerClasses","headerLabel","desc","TableHeader","header","tableHeaderCellClassName","tableHeaderClasses","idx","Table","rowsData","customRow","customHeader","noBorder","noLastBorder","tableClassName","tableHeaderClassName","tableRowClassName","tableBodyClassName","tableBodySize","tableHeaderSize","RowComponent","HeaderComponent","tableClasses","CampaignRow","t","useTranslation","isMobile","console","log","campaignId","createdOn","image_url","name","price","region","scheduleCampaign","formattedDate","moment","format","relativeDate","fromNow","useState","pricingModalOpen","setPricingModalOpen","datePickerOpen","setDatePickerOpen","handlePricingModalClose","handleDatePickerClose","priceLabels","priceValueLabels","body","src","alt","elem","type","datePicker","isOpen","onChange","value","newDate","timeStamp","onCalendarClose","height","Modal","open","onClose","Campaigns","campaigns","LanguageSelector","i18n","event","changeLanguage","target","defaultChecked","Dashboard","liveCampaigns","filter","campaign","pastCampaigns","upcomingCampaigns","setCampaigns","useEffect","getCampaignsURL","apiConfig","axios","get","then","data","catch","error","id","targetCampaignIndex","findIndex","requestPayload","routes","exact","path","component","use","Backend","initReactI18next","init","lng","fallbackLng","debug","backend","loadPath","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","history","createBrowserHistory","App","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c6fb635.chunk.js","sourcesContent":["const MOCK_SERVICE = 'https://my-json-server.typicode.com/sanidhyatandon/blustacks-server';\n\nconst defaultValues = {\n  retry: 0,\n  interval: 0,\n  timeout: 2000\n};\n\nconst localConfig = {\n  // Current User\n  getCampaigns: {\n    ...defaultValues,\n    url: `${MOCK_SERVICE}/campaignList`\n  }\n};\n\nconst config = localConfig;\nexport default config;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Tab extends Component {\n  static propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n  };\n\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  };\n\n  render() {\n    const {\n      onClick,\n      props: { activeTab, label, tabTitle }\n    } = this;\n\n    let className = 'tab-list-item';\n\n    if (activeTab === label) {\n      className += ' tab-list-active';\n    }\n\n    return (\n      <li className={className} onClick={onClick}>\n        {tabTitle}\n      </li>\n    );\n  }\n}\n\nexport default Tab;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Tab from '../Tab';\nclass Tabs extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTab: this.props.children[0].props.label\n    };\n  }\n\n  onClickTabItem = tab => {\n    this.setState({ activeTab: tab });\n  };\n\n  render() {\n    const {\n      onClickTabItem,\n      props: { children },\n      state: { activeTab }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ol className=\"tab-list\">\n          {children.map(child => {\n            const { label, tabTitle } = child.props;\n\n            return <Tab activeTab={activeTab} key={label} label={label} tabTitle={tabTitle} onClick={onClickTabItem} />;\n          })}\n        </ol>\n        <div className=\"tab-content\">\n          {children.map(child => {\n            if (child.props.label !== activeTab) return undefined;\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tabs;\n","import { LIVE, PAST, UPCOMING } from '../constants';\nconst checkDateStatus = date2 => {\n  let status;\n  const result = new Date().setHours(0, 0, 0, 0) - new Date(Number(date2)).setHours(0, 0, 0, 0);\n\n  switch (result > 0) {\n    case true:\n      status = PAST;\n      break;\n    case false:\n      switch (result < 0) {\n        case true:\n          status = UPCOMING;\n          break;\n        case false:\n          status = LIVE;\n          break;\n        default: {\n          status = LIVE;\n        }\n      }\n      break;\n    default: {\n      status = LIVE;\n    }\n  }\n\n  return status;\n};\n\n/**\n * Check if its mobile device or not\n * @returns {boolean} empty or not\n */\nconst isMobileDevice = () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\nexport { checkDateStatus, isMobileDevice };\n","export const routeFoodItemDetail = 'dishes';\nexport const searchPlaceholder = 'Search your Dish';\nexport const orderNow = 'Order Now';\nexport const cancel = 'Cancel';\nexport const filter = 'Filter Food';\nexport const LIVE = 'live';\nexport const PAST = 'past';\nexport const UPCOMING = 'upcoming';\n","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './table.scss';\n\nconst NO_DATA_STATE = '-';\n\n/**\n * This function return the alignment property based on the prop coming\n * @param {string} Alignment property coming in props\n * @param {number} index\n * @returns {string} Alignment property\n */\nconst setAlignment = (aligmentProp, index) => {\n  let align = 'left';\n  if (aligmentProp === 'default' && index !== 0) {\n    align = 'right';\n  }\n\n  if (aligmentProp === 'right') {\n    align = 'right';\n  }\n\n  if (aligmentProp === 'center') {\n    align = 'center';\n  }\n\n  return align;\n};\n\n/**\n * TableCell component contains native td tag implementation with some classes to handle the padding horizontally/vertically\n * DataNot Available state can also be handled.\n * @param {TableCell~propTypes} props - TableCell props.\n * @returns {ReactElement}\n */\nconst TableCell = props => {\n  const { cellData, children, className, width, paddingLevelY, paddingLevelX, desktop, mobile, ...otherProps } = props;\n\n  const tableCellClasses = classnames('table-cell', `py-${paddingLevelY}x`, `px-${paddingLevelX}x`, className);\n  return (\n    <td className={tableCellClasses} style={{ minWidth: width, width }} {...otherProps}>\n      {children || cellData || NO_DATA_STATE}\n    </td>\n  );\n};\n\n/**\n * Complete props of TableCell.\n * @typedef {Object} TableCell~propTypes\n * @property {(string|node)} [cellData=''] This hold the data/node to be displayed on the cell.\n * @property {string} [className=''] className for the TableCell.\n * @property {string} [width='auto'] width for the Table Cell.\n * @property {number} [paddingLevelY=2] paddingLevelY for the tabelCell.\n * @property {number} [paddingLevelX=0] paddingLevelX for the tabelCell.\n * @property {(string|node)} [children=null] children for the Table Cell.\n * @property {bool} [mobile=false] - to be displayed only on mobile.\n * @property {bool} [desktop=false] - to be displayed only on desktop.\n */\nTableCell.propTypes = {\n  cellData: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  width: PropTypes.string,\n  paddingLevelY: PropTypes.number,\n  paddingLevelX: PropTypes.number,\n  showNoDataState: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  mobile: PropTypes.bool,\n  desktop: PropTypes.bool\n};\n\nTableCell.defaultProps = {\n  cellData: '',\n  className: '',\n  width: 'auto',\n  children: null,\n  showNoDataState: true,\n  paddingLevelY: 2,\n  paddingLevelX: 0,\n  mobile: false,\n  desktop: false\n};\n\n/**\n * This component is responsible to render the TableRow component, this is a default TableRow called\n * from the Table Component. default Columns can either be created from data or with rowProps.\n * @param {TableRow~propTypes} props - TableRow props.\n * @returns {ReactElement}\n */\nconst TableRow = props => {\n  const {\n    rowData,\n    children,\n    className,\n    tableCellClassName,\n    columnAlignment,\n    rowProps: { columns },\n    ...otherProps\n  } = props;\n  const tableRowClasses = classnames('table-row', className);\n  const allChild = React.Children.toArray(children);\n\n  return (\n    <tr className={tableRowClasses}>\n      {(children && allChild.map(child => React.cloneElement(child, { ...otherProps }))) ||\n        (columns && columns.length\n          ? columns.map(\n              ({ key, ...htmlProps }, index) =>\n                key && (\n                  <TableCell\n                    cellData={rowData[key]}\n                    key={`cell-${index}`}\n                    align={setAlignment(columnAlignment, index)}\n                    className={tableCellClassName}\n                    {...otherProps}\n                    {...htmlProps}\n                  />\n                )\n            )\n          : Object.values(rowData).map((celldata, index) => (\n              <TableCell cellData={celldata} key={`cell-${index}`} className={tableCellClassName} {...otherProps} />\n            )))}\n    </tr>\n  );\n};\n\n/**\n * Complete props of TableRow.\n * @typedef {Object} TableRow~propTypes\n * @property {Object} [rowData={}] This hold the rowData for the Row.\n * @property {string} [className=''] ClassName for the TableRow.\n * @property {string} [tableCellClassName = ''] tableCellClassName for table cell.\n * @property {string} columnAlignment columnAlignment for table cell.\n * @property {Object} [rowProps = {}] rowProps object for the TableRow.\n * @property {(string|node)} [children = null] Children for the Table Row.\n */\nTableRow.propTypes = {\n  rowData: PropTypes.instanceOf(Object),\n  className: PropTypes.string,\n  tableCellClassName: PropTypes.string,\n  columnAlignment: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  rowProps: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.instanceOf(Object))\n  })\n};\n\nTableRow.defaultProps = {\n  rowData: {},\n  className: '',\n  columnAlignment: 'default',\n  tableCellClassName: '',\n  children: null,\n  rowProps: {\n    columns: []\n  }\n};\n\n/**\n * TableHeaderCell component contains native th tag implementation, which can also be called from a custom Header component.\n * @param {TableHeaderCell~propTypes} props - TableHeaderCell props.\n * @returns {ReactElement}\n */\nconst TableHeaderCell = props => {\n  const {\n    headerCelldata,\n    children,\n    paddingLevelHeaderY,\n    paddingLevelHeaderX,\n    className,\n    desktop,\n    mobile,\n    ...otherProps\n  } = props;\n\n  const headerClasses = classnames(\n    'table-header-cell',\n    `py-${paddingLevelHeaderY}x`,\n    `px-${paddingLevelHeaderX}x`,\n    className\n  );\n  let headerLabel = headerCelldata;\n  let htmlProps = {};\n  if (typeof headerLabel === 'object') {\n    const { label, desc, ...remProps } = headerCelldata;\n    htmlProps = remProps;\n    headerLabel = label;\n  }\n  return (\n    headerLabel !== null && (\n      <th className={headerClasses} {...otherProps} {...htmlProps}>\n        {children || headerLabel}\n      </th>\n    )\n  );\n};\n\n/**\n * Complete props of TableHeaderCell.\n * @typedef {Object} TableHeaderCell~propTypes\n * @property {Object|string} [headerCelldata=''] This hold headerCelldata for the headerCell.\n * @property {string} [className=''] ClassName for TableHeader cell.\n * @property {(string|node)} [children=null] Children for the Table Row.\n * @property {number} [paddingLevelHeaderY=1] paddingLevelHeaderY for the TableHeaderCell.\n * @property {number} [paddingLevelHeaderX=0] paddingLevelHeaderX for the TableHeaderCell.\n * @property {bool} [mobile=false] - to be displayed only on mobile.\n * @property {bool} [desktop=false] - to be displayed only on desktop.\n */\nTableHeaderCell.propTypes = {\n  headerCelldata: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      label: PropTypes.string.isRequired\n    })\n  ]),\n  className: PropTypes.string,\n  paddingLevelHeaderY: PropTypes.number,\n  paddingLevelHeaderX: PropTypes.number,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  mobile: PropTypes.bool,\n  desktop: PropTypes.bool\n};\n\nTableHeaderCell.defaultProps = {\n  headerCelldata: '',\n  className: '',\n  paddingLevelHeaderY: 1,\n  paddingLevelHeaderX: 0,\n  children: null,\n  mobile: false,\n  desktop: false\n};\n\n/**\n * TableHeader component contains native tr tag implementation and is generally a Default Header component which renders the Header for the Table.\n * @class\n * @param {TableHeader~propTypes} props - TableHeader props.\n * @returns {ReactElement}\n */\nconst TableHeader = props => {\n  const { header, children, className, columnAlignment, tableHeaderCellClassName, ...otherProps } = props;\n  const tableHeaderClasses = classnames('table-header', className);\n  const allChild = React.Children.toArray(children);\n  return (\n    <tr className={tableHeaderClasses}>\n      {(children && allChild.map(child => React.cloneElement(child, { ...otherProps }))) ||\n        header.map((headerCelldata, idx) => (\n          <TableHeaderCell\n            headerCelldata={headerCelldata}\n            key={`header-cell-${idx}`}\n            align={setAlignment(columnAlignment, idx)}\n            className={tableHeaderCellClassName}\n            {...otherProps}\n          />\n        ))}\n    </tr>\n  );\n};\n\n/**\n * Complete props of TableHeader.\n * @typedef {Object} TableHeader~propTypes\n *\n * @property {(string[]|Object[])} [header=[]] This is data for the tableHeader.\n * @property {string} [className=''] ClassName for TableHeader cell.\n * @property {string} [tableHeaderCellClassName=''] tableHeaderCellClassName.\n * @property {(string|node)} [children=null] Children for the Table Row.\n */\nTableHeader.propTypes = {\n  header: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Object)])),\n  className: PropTypes.string,\n  tableHeaderCellClassName: PropTypes.string,\n  columnAlignment: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n};\n\nTableHeader.defaultProps = {\n  header: [],\n  className: '',\n  columnAlignment: 'default',\n  tableHeaderCellClassName: '',\n  children: null\n};\n\n/**\n * Table component is creating a table with defined header and data rows.\n * It consumes different components like TableHeader, TableRow and TableCell which can either be custom or default.\n * @class\n * @param {Table~propTypes} props - Table props.\n * @returns {ReactElement}\n */\nconst Table = props => {\n  const {\n    rowsData,\n    header,\n    customRow,\n    customHeader,\n    noBorder,\n    noLastBorder,\n    tableClassName,\n    tableHeaderClassName,\n    tableHeaderCellClassName,\n    tableRowClassName,\n    tableBodyClassName,\n    tableBodySize,\n    tableHeaderSize,\n    rowProps,\n    showNoDataState,\n    tableCellClassName,\n    paddingLevelHeaderX,\n    paddingLevelHeaderY,\n    paddingLevelX,\n    paddingLevelY,\n    ...otherProps\n  } = props;\n  const RowComponent = customRow || TableRow;\n  const HeaderComponent = customHeader || TableHeader;\n  const tableClasses = classnames(\n    'default-table',\n    noBorder && 'no-border',\n    noLastBorder && 'no-last-border',\n    tableClassName\n  );\n\n  return (\n    <div className=\"table-wrapper\">\n      <table className={tableClasses}>\n        {header && (\n          <thead className={classnames('table-head', `table-head-${tableHeaderSize}`)}>\n            <HeaderComponent\n              header={header}\n              className={tableHeaderClassName}\n              tableHeaderCellClassName={tableHeaderCellClassName}\n              paddingLevelHeaderX={paddingLevelHeaderX}\n              paddingLevelHeaderY={paddingLevelHeaderY}\n              {...otherProps}\n            />\n          </thead>\n        )}\n        <tbody className={classnames('table-body', tableBodyClassName, `table-body-${tableBodySize}`)}>\n          {rowsData.map((rowData, index) => (\n            <RowComponent\n              rowData={rowData}\n              key={`row-${index}`}\n              className={tableRowClassName}\n              rowProps={rowProps}\n              showNoDataState={showNoDataState}\n              tableCellClassName={tableCellClassName}\n              paddingLevelX={paddingLevelX}\n              paddingLevelY={paddingLevelY}\n              {...otherProps}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n/**\n * Complete props of Table.\n * @typedef {Object} Table~propTypes\n *\n * @property {rowsData} - This is rowsData for the table.\n * @property {(string[]|Object[])} [header=null] Header as array of string or object.\n * @property {func} [customRow=null] CustomRow Component..\n * @property {func} [customHeader=null] CustomeHeader Component.\n * @property {bool} [noBorder=false] Flag for NoBorder variant.\n * @property {bool} [showNoDataState=false] Flag for NoData State.\n * @property {number} [paddingLevelHeaderY=1] PaddingLevelY for the TableHeaderCell.\n * @property {number} [paddingLevelHeaderX=0] PaddingLevelX for the TableHeaderCell.\n * @property {number} [paddingLevelY=2] PaddingLevelY for the TableBodyCell.\n * @property {number} [paddingLevelX=0] PaddingLevelX for the TableBodyCell.\n * @property {string} [tableClassName=''] This variable is used to override the default table styling.\n * @property {string} [tableHeaderClassName=''] This variable is used to override the default table header styling.\n * @property {string} [tableHeaderCellClassName=''] This variable is used to override the default table header cell styling.\n * @property {string} [tableRowClassName=''] This variable is used to override the default table row styling.\n * @property {string} [tableCellClassName=''] This variable is used to override the default table cell styling.\n * @property {string} [tableBodyClassName=''] This variable is used to override the default table body styling.\n * @property {bool} [noLastBorder=false] Flag for no last border variant.\n * @property {('small'|'medium'|'large')} [tableHeaderSize='medium'] This is used to set the size for Header.\n * @property {('default'|'left'|'right'|'center')} [columnAlignment='default'] This is used to set the alignment for each column.\n * @property {('small'|'medium'|'large')}  [tableBodySize='medium'] This is used to set the size for body content.\n * @property {object} [rowProps={}] Custom rows props for the rows.\n * @property {object} [columns=[]] Columns props for the rows\n */\nTable.propTypes = {\n  rowsData: PropTypes.arrayOf(PropTypes.instanceOf(Object)).isRequired,\n  header: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Object)])),\n  customRow: PropTypes.func,\n  customHeader: PropTypes.func,\n  noBorder: PropTypes.bool,\n  showNoDataState: PropTypes.bool,\n  paddingLevelHeaderY: PropTypes.number,\n  paddingLevelHeaderX: PropTypes.number,\n  paddingLevelY: PropTypes.number,\n  paddingLevelX: PropTypes.number,\n  tableClassName: PropTypes.string,\n  tableHeaderClassName: PropTypes.string,\n  tableHeaderCellClassName: PropTypes.string,\n  tableRowClassName: PropTypes.string,\n  tableCellClassName: PropTypes.string,\n  tableBodyClassName: PropTypes.string,\n  noLastBorder: PropTypes.bool,\n  tableHeaderSize: PropTypes.oneOf(['small', 'medium', 'large']),\n  columnAlignment: PropTypes.oneOf(['default', 'left', 'right', 'center']),\n  tableBodySize: PropTypes.oneOf(['small', 'medium', 'large']),\n  rowProps: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.instanceOf(Object))\n  })\n};\n\nTable.defaultProps = {\n  header: null,\n  customRow: null,\n  customHeader: null,\n  noBorder: false,\n  showNoDataState: true,\n  paddingLevelHeaderY: 1,\n  paddingLevelHeaderX: 0,\n  paddingLevelY: 2,\n  paddingLevelX: 0,\n  tableClassName: '',\n  tableHeaderClassName: '',\n  tableHeaderCellClassName: '',\n  tableRowClassName: '',\n  tableCellClassName: '',\n  tableBodyClassName: '',\n  noLastBorder: false,\n  tableHeaderSize: 'medium',\n  tableBodySize: 'medium',\n  columnAlignment: 'default',\n  rowProps: {\n    columns: []\n  }\n};\nexport { Table, TableHeader, TableHeaderCell, TableRow, TableCell };\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport DatePicker from 'react-date-picker';\nimport { Modal } from '@material-ui/core';\nimport { isMobileDevice } from '../../common/utilities';\n\nimport { Table, TableRow, TableCell } from '../../common/Table';\n\nimport './index.scss';\n\nexport const CampaignRow = props => {\n  const { t } = useTranslation();\n  const isMobile = isMobileDevice();\n  console.log(isMobile);\n\n  // Destructure Incoming props.\n  const {\n    rowData: { campaignId, createdOn, image_url, name, price, region } = {},\n    rowProps: { scheduleCampaign }\n  } = props;\n  const formattedDate = moment(Number(createdOn)).format('MMM YYYY, DD');\n\n  const relativeDate = moment(Number(createdOn)).fromNow();\n\n  const [pricingModalOpen, setPricingModalOpen] = React.useState(false);\n  const [datePickerOpen, setDatePickerOpen] = useState(false);\n  const scheduleCampaignHandler = value => {\n    const newDate = moment(value).format();\n    const timeStamp = moment(newDate).format('x');\n\n    scheduleCampaign(campaignId, timeStamp);\n  };\n\n  const handlePricingModalOpen = () => {\n    setPricingModalOpen(true);\n  };\n\n  const handlePricingModalClose = () => {\n    setPricingModalOpen(false);\n  };\n\n  const handleDatePickerOpen = () => {\n    setDatePickerOpen(true);\n  };\n\n  const handleDatePickerClose = () => {\n    setDatePickerOpen(false);\n  };\n\n  const priceLabels = ['1 week - 1 Month', '6 Months', '1 Year'];\n  const priceValueLabels = ['monthly', 'halfYearly', 'annually'];\n\n  const body = (\n    <div className=\"modal-body\">\n      <div className={!isMobile ? 'flex align-end' : 'align-center mb-16'}>\n        <img src={image_url} alt={name} className=\"ml-24 mt-24\" />\n        <div className=\"ml-16\">\n          <h2>{name}</h2>\n          <h3 className=\"text-gray mb-0\">{region}</h3>\n        </div>\n      </div>\n      <div className=\"ml-16 mr-24\">\n        <h2>{t('pricing')}</h2>\n        {!!price &&\n          !!price.length &&\n          price.map((elem, index) => (\n            <dl className=\"pricing flex mb-64\" key={`elem-${index}`}>\n              <dt className=\"flex--1\">{priceLabels[index]}</dt>\n              <dd>{elem[priceValueLabels[index]]}</dd>\n            </dl>\n          ))}\n      </div>\n      <button type=\"button\" onClick={handlePricingModalClose}>\n        {t('closeModal')}\n      </button>\n    </div>\n  );\n\n  const datePicker = (\n    <DatePicker\n      isOpen={datePickerOpen}\n      onChange={scheduleCampaignHandler}\n      value={new Date()}\n      onCalendarClose={handleDatePickerClose}\n    />\n  );\n\n  return (\n    <>\n      <TableRow>\n        <TableCell width=\"20%\">\n          <>\n            {formattedDate}\n            <br />\n            <span className=\"text-small text-gray\">{relativeDate}</span>\n          </>\n        </TableCell>\n        <TableCell width=\"20%\">\n          <div className={!isMobile && 'flex'}>\n            <img width={40} height={40} src={image_url} alt={name} />\n            <div className={!isMobile && 'ml-8'}>\n              {name}\n              <br />\n              <span className=\"text-small text-gray\">{region}</span>\n            </div>\n          </div>\n        </TableCell>\n        <TableCell width=\"20%\">\n          <div className={classnames(isMobile ? 'align-center' : 'flex flex-center')}>\n            <img src=\"price.png\" width={20} height={20} alt=\"price\" className={classnames(!isMobile && 'mr-8')} />\n            <button className=\"btn-link\" onClick={handlePricingModalOpen}>\n              {t('viewPricing')}\n            </button>\n          </div>\n          <Modal open={pricingModalOpen} onClose={handlePricingModalClose}>\n            {body}\n          </Modal>\n        </TableCell>\n        <TableCell width=\"60%\">\n          <div className={!isMobile && 'flex'}>\n            <div className={classnames(isMobile ? 'mb-8' : 'flex flex-center')}>\n              <img src=\"file.png\" width={20} height={20} alt=\"report\" className=\"pointer mr-8\" />\n              <label className=\"mr-24 small\">CSV</label>\n            </div>\n            <div className={classnames(isMobile ? 'mb-8' : 'flex flex-center')}>\n              <img src=\"statistics-report.png\" width={20} height={20} alt=\"file\" className=\"pointer mr-8\" />\n              <label className=\"mr-24 small\">{t('report')}</label>\n            </div>\n            <div className={classnames(isMobile ? 'mb-8' : 'flex flex-center')}>\n              <img\n                src=\"calendar.png\"\n                width={20}\n                height={20}\n                alt=\"file\"\n                className=\"pointer mr-8\"\n                onClick={handleDatePickerOpen}\n              />\n              <label className=\"mr-24 small\">{t('scheduleAgain')}</label>\n            </div>\n            <Modal open={datePickerOpen} onClose={handleDatePickerClose}>\n              {datePicker}\n            </Modal>\n          </div>\n        </TableCell>\n      </TableRow>\n    </>\n  );\n};\n\nconst Campaigns = props => {\n  const { t } = useTranslation();\n  // returns the UI for Campaigns Table.\n\n  const getHeader = () => [`${t('date')}`, `${t('campaign')}`, `${t('view')}`, `${t('actions')}`];\n\n  const { campaigns = [], scheduleCampaign } = props;\n\n  return (\n    <>\n      <Table\n        rowsData={campaigns}\n        rowProps={{ scheduleCampaign }}\n        header={getHeader()}\n        tableHeaderCellClassName=\"header\"\n        customRow={CampaignRow}\n        tableHeaderSize=\"small\"\n      />\n    </>\n  );\n};\nexport default Campaigns;\n","import React from 'react';\nimport classnames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { isMobileDevice } from '../../common/utilities';\n\nconst LanguageSelector = () => {\n  const { i18n } = useTranslation();\n  const changeLanguage = event => {\n    i18n.changeLanguage(event.target.value);\n  };\n\n  // to check if mobile device.\n  const isMobile = isMobileDevice();\n\n  return (\n    <div onChange={changeLanguage} className={classnames('align-right', isMobile && 'mt-24', 'mr-8')}>\n      <input type=\"radio\" value=\"en\" name=\"language\" defaultChecked className=\"mr-8\" />\n      <label className=\"mr-24\">English</label>\n      <input type=\"radio\" value=\"gr\" name=\"language\" className=\"mr-8\" />\n      <label>German</label>\n    </div>\n  );\n};\n\nexport default LanguageSelector;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport classnames from 'classnames';\nimport Tabs from '../../common/Tabs';\nimport Campaigns from '../Campaigns';\nimport LanguageSelector from '../../common/LanguageSelector';\nimport { checkDateStatus, isMobileDevice } from '../../common/utilities';\nimport { LIVE, PAST, UPCOMING } from '../../constants';\n\nimport './styles/index.scss';\nconst Dashboard = props => {\n  const { t } = useTranslation();\n  const { campaigns = [], scheduleCampaign } = props;\n  const liveCampaigns = campaigns.filter(campaign => checkDateStatus(campaign.createdOn) === LIVE);\n  const pastCampaigns = campaigns.filter(campaign => checkDateStatus(campaign.createdOn) === PAST);\n  const upcomingCampaigns = campaigns.filter(campaign => checkDateStatus(campaign.createdOn) === UPCOMING);\n  // to check if mobile device.\n  const isMobile = isMobileDevice();\n  return (\n    <>\n      <div className=\"header-section\">\n        <img src=\"bluestacks-logo.png\" width=\"250\" alt=\"bluestacks-logo\" />\n      </div>\n      <LanguageSelector />\n      <div className=\"dashboard\">\n        <h1 className={classnames('header', isMobile && 'ml-24')}>{t('campaignTitle')}</h1>\n        <Tabs>\n          <div label=\"Upcoming Campaigns\" tabTitle={t('upcomingCampaigns')}>\n            <Campaigns campaigns={upcomingCampaigns} scheduleCampaign={scheduleCampaign} />\n          </div>\n          <div label=\"Live Campaigns\" tabTitle={t('liveCampaigns')}>\n            <Campaigns campaigns={liveCampaigns} scheduleCampaign={scheduleCampaign} />\n          </div>\n          <div label=\"Past Campaigns\" tabTitle={t('pastCampaigns')}>\n            <Campaigns campaigns={pastCampaigns} scheduleCampaign={scheduleCampaign} />\n          </div>\n        </Tabs>\n      </div>\n    </>\n  );\n};\nexport default Dashboard;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport apiConfig from '../../api.config';\nimport DashboardView from '../../components/Dashboard';\n\nconst Dashboard = () => {\n  const [campaigns, setCampaigns] = useState([]);\n\n  const scheduleCampaign = (id, value) => {\n    let targetCampaignIndex = campaigns.findIndex(campaign => campaign.campaignId === id);\n    campaigns[targetCampaignIndex].createdOn = value;\n    const requestPayload = [...campaigns];\n\n    setCampaigns(requestPayload);\n  };\n\n  useEffect(() => {\n    const {\n      getCampaigns: { url: getCampaignsURL }\n    } = apiConfig;\n    axios\n      .get(getCampaignsURL)\n      .then(({ data }) => {\n        setCampaigns(data);\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  return (\n    <div>\n      <div className=\"campaign-list\">\n        {campaigns && campaigns.length ? (\n          <DashboardView campaigns={campaigns} scheduleCampaign={scheduleCampaign} />\n        ) : (\n          <div> No Data Available</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import { Route, Switch } from 'react-router-dom';\r\nimport React from 'react';\r\n// import FoodList from '../containers/FoodList';\r\nimport Dashboard from '../containers/Dashboard';\r\nconst routes = (\r\n  <Switch>\r\n    <Route exact={true} path=\"/\" component={Dashboard} />\r\n  </Switch>\r\n);\r\n\r\nexport default routes;\r\n","import i18n from 'i18next';\n\nimport Backend from 'i18next-xhr-backend';\n\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n\n  .use(Backend)\n\n  .use(initReactI18next)\n\n  .init({\n    lng: 'en', //default language\n\n    fallbackLng: 'en', //when specified language translations not present\n\n    //then fallbacklang translations loaded.\n\n    debug: true,\n\n    backend: {\n      /* translation file path */\n\n      loadPath: './assets/{{ns}}/{{lng}}.json'\n    },\n\n    /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\n\n    ns: ['translations'],\n\n    defaultNS: 'translations',\n\n    keySeparator: false,\n\n    interpolation: {\n      escapeValue: false,\n\n      formatSeparator: ','\n    },\n\n    react: {\n      wait: true\n    }\n  });\n\nexport default i18n;\n","import React, { Component, Suspense } from 'react';\n\n// import route Components here\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport routes from './routes/routing';\nimport { createBrowserHistory } from 'history';\nimport './i18n';\nimport './common/utilities.scss';\n\nconst history = createBrowserHistory();\n\nclass App extends Component {\n  render() {\n    return (\n      <Suspense fallback={null}>\n        <Router history={history}>\n          <>\n            {routes}\n          </>\n        </Router>\n      </Suspense>\n    );\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}